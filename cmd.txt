MLOps-WorkShop-1
azure-resource-connection
-----------


2nd pipeline
-------
1. Use Python 3.6
2. Install Python requirements

-----------
3. data test
pytest training/train_test.py --doctest-modules --junitxml=junit/test-results.xml --cov=data_test --cov-report=xml --cov-report=html

4. Publish Test Results 
------
Azure CLI 
5. install Azure ML CLI
---create azure ml cli command
az extension add -n azure-cli-ml

6 .Create Azure ML workspace

--- create workspace in azure ml command
az ml workspace create -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -l $(azureml.localion) --exist-ok --yes

7. create azure compute cluster
az ml computetarget create amlcompute -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(amlcompute.clusterName) -s $(amlcompute.vmSize) --min-nodes $(amlcompute.minNodes) --max-nodes $(amlcompute.maxNodes) --idle-seconds-before-scaledown $(amlcompute.idleSecondsBeforeScaledown)

8. upload data to datastore
az ml datastore upload -w $(azureml.workspaceName)-g $(azureml.resourceGroup) -n
$(az ml datastore show-default -w $(azureml.workspaceName)-g $(azureml.resourceGroup) --query name -o tsv) -p data -u fintech --overwrite true

9. Make Metadata and Models directory
-take bash
 
Script-inline
mkdir metadata && mkdir models

10. Training Model
take AzureCLI
Script-inline
az ml run submit-script -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -e $(experiment.name) --ct $(amlcompute.clusterName) -d conda_dependencies.yml -c train_fintech -t ../metadata/run.json train_aml.py

------variable
experiment.name - fintech_classification
model.name   - fintech_model

11. Registering Model:
az ml model register -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(model.name) -f metadata/run.json --asset-path outputs/models/fintech_model.pkl -d "classification model for filling a claim predication" --tag "data"="fintech" --tag "model"="classification" --model-framework ScikitLearn -t metadata/model.json

12.Downloading Model
az ml model download -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -i $(jq -r .modelId metadata/model.json) -t ./models --overwrite

13. Copy file
Source Folder:
$(Build.SourcesDirectory)
Contains:
**/metadata/*
**/models/*
**/deployment/*
**/tests/integration/*
**/package_requirement/*


**//

Target Folder:
$(Build.ArtifactStagingDirectory)

14. Publish Pipeline Artifact
File or Directory Name
$(Build.ArtifactStagingDirectory)
Artifact:
landing
------------------------
Release Pipeline
-add ci pipeline

1. Deploy to Staging
2. Use Python 3.6
3. Add ML Extension
az extension add -n azure-cli-ml
4. Deploy to ACI

az ml model deploy -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(service.name.staging) -f ../metadata/model.json --dc aciDeploymentConfigStaging.yml --ic inferenceConfig.yml --overwrite

variables:
service.name.staging - fintech-service-aci
azureml.resourceGroup- mlops-wksh-arg-1
azureml.workspaceName-

az ml model deploy -g mlops-wksh-arg-1 -w mlops-wksh-aml-1 -n fintech-service-aci -f model.json --dc aciDeploymentConfigStaging.yml --ic inferenceConfig.yml --overwrite

az ml model deploy -g mlops-wksh-arg-1 -w mlops-wksh-aml-1 -n fintech-service-aci -f model.json -dc aciDeploymentConfigStaging.yml --ic inferenceConfig.yml [--overwrite] [--debug]



az ml service show -g mlops-wksh-arg-1 -w mlops-wksh-aml-1 -n fintech-service-aci

az ml service logs -g mlops-wksh-arg-1 -w mlops-wksh-aml-1 -n fintech-service-aci

az ml online-deployment create --endpoint-name <endpoint-name> -n <deployment-name> -f <spec_file.yaml> --local

az ml service show -g mlops-wksh-arg-1 -w mlops-wksh-aml-1 -n fintech-service-aci --query scoringUri -o tsv

az extension add --name serviceconnector-passwordless
5.Install Requirements
select .sh file
select dir
6.Staging Test (Azure CLI)
pytest staging_test.py --doctest-modules --junitxml=junit/test-results.xml --cov-report=html --scoreurl $(az ml service show -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(service.name.staging) --query scoringUri -o tsv)


//// Deploy to prod 
1. Use Python 3.6

az ml computetarget create aks -g $(azureml.resourceGroup) -w $(azureml.workspaceName) -n $(aks.clusterName) -s $(aks.vmSize) -a $(aks.agentCount)
